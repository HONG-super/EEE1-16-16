MOV R0, #0XAB  
MOV R2, #135
MOV R1, #0xA1 
MOV R3, #0xF2 

 


MOVC1 R0, R2 
MOV R6, R0 



MOV R0, #0xAB

MOVC1 R0, R3 
 

//b *c 

MOVC1 R2, R1

 

// a*d + b*c 

ADD R0, R2 //Add the result of a*d and b*c, result in R0 

 

//2^(-8) (a*d + b*c) 

LSR R7, R0, #8 //Shift the combined result right by 8 bits, store in R7 

 

//Lower part of multiplication 

LSL R0, R0, #8 //Shift the combined result left by 8 bits to align: 2^8 (a*d + b*c) 

ADD R6, R0 //Add this to the product of a*c : R6 = a*c + 2^8 (a*d + b*c) 

 

ADC R7, #0 // Add carry to the upper part 

 

//b*d 

MOVC1 R1, R3 //Multiply b and d, result in R1 

 

//R7 = 2^(-8) (a*d + b*c) + b*d  

ADD R7, R1 // Add the result to the shifted value for the high 16 bits 